#---------------------------------------------------------------------
# This file was automatically generated by NativeHasFunctionFinder
#---------------------------------------------------------------------

import idaapi
from idc import *
# from binascii import unhexlify

__idaBaseAddress = list(Segments())[SegByName('.text')]
__ImageBase = LocByName("__ImageBase")
if __ImageBase == BADADDR:
    MakeName(__idaBaseAddress, "__ImageBase")
elif __ImageBase != __idaBaseAddress:
    print "Error: Start of .text segment does not match label __ImageBase, please adjust or remove __ImageBase label (this is a safety check to ensure the correct addresses will be used)." % (__idaBaseAddress, __ImageBase)
    raise Exception("Mismatching addresses")


def PatchBytes(ea, replaceList):
    for i in range(len(replaceList)):
        if replaceList[i] != -1:
            idaapi.patch_byte(ea+i, replaceList[i])

def rebaseAddress(ea):
    return ea - __gtaBaseAddress + __idaBaseAddress

def forceAsCode(ea, length):
    if not isCode(GetFlags(ea)):
        head = ItemHead(ea)
        head = ea if (head > 1<<31 or not head) else head
        if MakeUnknown(head, length, 0) == False:
            print "Couldn't make unknown at  0x%012x" % ea
            return None
        codeLen = MakeCode(ea)

        if codeLen:
            if not isCode(GetFlags(ea)):
                print "%0x012x: Couldn't convert block into code even though it said we did" % ea
                return None
            return codeLen
        else:
            print "0x%012x: (head: 0x%012x) Couldn't convert block into code" % (ea, head)
            return None
    return length

def MakeNativeFunction(ea, name):
    ea = rebaseAddress(ea)
    len = forceAsCode(ea, 5) # Natives are almost always a 5 byte JMP
    loc = 0
    while True:
        loc = LocByName(name)
        if loc == BADADDR:
            break
        if loc != ea:
            print "0x%012x: Removed existing name '%s'" % (loc, name)
        MakeNameEx(loc, '', 0 )  # Remove any existing names that match
    if not MakeNameEx(ea, name, SN_NOWARN):
        # Try removing a previously existing name
        MakeNameEx( LocByName(name), '', 0 ) 
        if not MakeNameEx(ea, name, SN_NOWARN):
            print "0x%012x: *** Couldn't set name %s" % (ea, name)
    if not MakeFunction(ea, BADADDR):
        if not GetFunctionName(ea):
            print "0x%012x: *** Couldn't make area into function" % (ea)
        # SetFunctionEnd(ea, ea+5)

    codeMnem = GetMnem(ea)
    codeDisasm = GetDisasm(ea)
    if codeMnem == 'jmp':
        forceAsCode(GetOperandValue(ea, 0), 8)
        targetMnem = GetMnem(GetOperandValue(ea, 0))
        targetDisasm = GetDisasm(GetOperandValue(ea, 0))
        if targetMnem == "retn":
            MakeNop(ea, 8) # 8 bit alignment
            extraMsg = " (replaced original JMP with RETN)"
        else:
            extraMsg = ""

        print "0x%012x: %-70s: %s -> %s%s" % (ea, name, codeDisasm, targetDisasm, extraMsg)
    else:
        print "0x%012x: %-70s: %s" % (ea, name, codeDisasm)
    
#---------------------------------------------------------------------

